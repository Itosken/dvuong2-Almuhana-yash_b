CPSC 311 Documenting Code
Document Index
Application
The project requires the design and implementation of an application program that creates a page index for a text document. The index must have one line for each word in the document, with a list of page numbers following the word in that line. Here is a sample:
Class 12, 34, 56

Classes and Functions
The document index program must have a DocumentFile class and a DocumentIndex class with the indicated functions:
DocumentFile
* Close: Close the document file after it's been used. 
* GetWord: Return the next legal word from the document file, stripping out the allowable punctuation and  skipping over the illegal words (those with disallowed characters).
* GetPageNumber: Return the current page number.
* LoadExclusions: Load the word exclusion list from a file, given the file's name.
* Open: Open the document file, given its name. 
* Read: Read the next line of the document file; update the page number if appropriate.
DocumentIndex
* Create: Create the index from the document file.
* Write: Write the index to a file.

Program Files
* documentindex.h: contains declarations of the DocumentFile and DocumentIndex classes.
* documentindex.cpp: contains skeletons for the required member functions, either completely empty or partially filled in.
* getline.cpp: contains the definition of a function that handles text lines with various combinations of line endings--carriage return/line feed. It accommodates the differences between platforms; different editors and word processors use different line endings.
* getline.h: contains the declaration of the GetLine function.
* main.cpp: contains a set of test functions that will call DocumentIndex's functions.
Test Files
* document.txt: contains a large multipage document to be used as input for the CreateIndex function.
* excessiveappearances.txt: contains a number of words, some repeated more than the ten allowed times, to be used as input for testing.
* exclusions.txt: contains a list of words, one per file line, to be used as input for the LoadExclusions function.
* expectedindex.txt: contains a sample index file, created when the document.txt file is used as input. Main.cpp compares it against the actualindex.txt file created during testing.
* getword.txt: contains a small document that is simply a collection of legal words, including some with legal punctuation and some with illegal characters such as numbers and symbols; it is used to test the GetWord function.
* pagenumber.txt: contains a small document that is primarily a set of pages; it is used to test the "next page" detection function.
